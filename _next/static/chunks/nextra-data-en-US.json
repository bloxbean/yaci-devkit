{"/about":{"title":"About","data":{"":"The Yaci DevKit offers a customizable Cardano devnet that quickly launches and resets via the Yaci CLI, enabling faster\niterations for developers. It features Yaci Store, a lightweight indexer using H2, and Yaci Viewer, a browser-based interface for viewing transactions.\nIt supports flexible configurations, integrates with Ogmios and Kupo, and is compatible with Blockfrost API endpoints, all easily deployable\nwith Docker Compose for efficient setup."}},"/commands":{"title":"Commands","data":{"common-commands#Common Commands":"Yaci CLI commands are used to create and interact with the local devnet.","create-node#create-node":"To create a devnet node.\nUsage:\n create-node [options]\nExample:\nCreate a new node with the default options. 1 sec block time and overwrite the existing node if it exists.\n create-node -o --start\nOptions:\n--overwrite or -o boolean : Overwrite the existing node if it exists.\n--start : Start the node after creation.\n--block-time or -b double : Set the block time in seconds. Default is 1 sec.\n--slot-length or -s double : Slot Length in sec. Default is 1 sec.\n--epoch-length or -e int : Epoch Length in slots. Default is 500.\n--era String : Era (babbage, conway). Default is babbage.\nNote: There are many other node specific configuration that can be set through env file. Please refer to the Node Configuration for more details.","reset#reset":"Reset local devnet. Delete data and logs folder and restart.\nUsage:\nreset\nIf the devnet gets stuck or you simply want to reset the data and restart with the same configuration, simply use the command \"reset\".\nIt will restore your devnet to its initial state, allowing you to continue your development seamlessly.","stop#stop":"Stop the local devnet.\nUsage:\nstop\nNote: You can stop the devnet using command \"stop\". This will stop the devnet and you can start it again using the \"start\" command.\nThe devnet will start from the last block it was stopped at. Based on the securityParam configuration in devnet node,\nthe node may get stuck if it is stopped for a long time. Please refer to the Node Configuration to\nknow how to provide a custom value for securityParam.","cluster#cluster":"To switch to devnet mode for an existing devnet node when Yaci CLI is not in devnet mode.\nUsage:\nyaci-cli:> cluster","exit#exit":"To stop the node and other running services and exit from devnet node.\nUsage:\ndevnet:default>exit\nSimilarly, you can use the exit command in non-devnet mode to exit from the Yaci CLI.","topup#topup":"To top up the address with the given ada amount.\nUsage:\ntopup [--address String] [--value double]\nExample:\nTo fund address with 45k ada.\ntopup  45000","default-addresses#default-addresses":"To show the default addresses.\nUsage:\ndefault-addresses\nBy default, the devnet is created with 20 default addresses at different derivation path from a test 24 words mnemonic\nand each address is funded with 10k ada.\nThis is useful if you want to write your tests or tools using DevKit and you need some addresses to work with.\nSo, you know that these addresses are always available in the devnet.24 words mnemonic for the default addresses is:\ntest test test test test test test test test test test test test test test test test test test test test test test sauce","show-faucet-addresses#show-faucet-addresses":"To show the faucet addresses.\nUsage:\nshow-faucet-addresses\nThe faucet addresses are the addresses that are used to fund the default addresses in the devnet and also used to top up the addresses using the topup command.","utxos#utxos":"To show the UTXOs of the given address.\nUsage:\nutxos [address] [--pretty-print-inline-datum]\nExample:\nutxos \nutxos  --pretty-print-inline-datum","tip#tip":"To show the tip of the node.\nUsage:\ntip","info#info":"To show the info of the node.\nUsage:\ninfo","log-commands#Log Commands":"","logs#logs":"To show the logs of the node.\nUsage:\nlogs","yaci-store-logs#yaci-store-logs":"To show the logs of the yaci-store (if enabled).\nUsage:\nyaci-store-logs","ogmios-logs#ogmios-logs":"To show the logs of the ogmios (if enabled).\nUsage:\nogmios-logs","kupo-logs#kupo-logs":"To show the logs of the kupo (if enabled).\nUsage:\nkupo-logs"}},"/how_to_use":{"title":"How to Use","data":{"devkit-script#DevKit Script":"For zip based installation, you can find the devkit.sh script under the bin folder. This script is used to manage the DevKit containers and Yaci CLI.For curl based installation, you can find the devkit.sh script in $HOME/.yaci-devkit/bin folder.\nIf the bin folder is in your PATH, you can just use devkit command to manage the DevKit containers and Yaci CLI.\nOptions:\n  start   Start the DevKit containers and CLI.\n  stop    Stop the DevKit containers.\n  cli     Query the Cardano node in the DevKit container using cardano-cli.\n  ssh     Establish an SSH connection to the DevKit container.\n  info    Display information about the Dev Node.\n  version Display the version of the DevKit.\n  help    Display this help message.","to-start-the-devkit-docker-compose#To start the DevKit docker compose":"To start the DevKit containers and yaci-cli.For, curl based installation, you can use the following command.\ndevkit start\nFor, zip based installation, you can use the following command.\n./devkit.sh start\nNote: If you have some ports already in use, please make sure the mentioned ports in config/env file are free.\nYou can also change the ports in config/env file. Any changes to env file will be applied when you restart the docker compose.","fund-default-test-accounts-optional#Fund default test accounts (Optional)":"Update config/env file to include your test Cardano addresses to automatically topup Ada.\ntopup_addresses=<address1>:<ada_value>,<address2><ada_value>\nExample\ntopup_addresses=:20000,:10000\nImportant: After updating env file, you need to restart the docker compose using devkit.sh stop and devkit.sh start options.Note: You can also use the topup command in Yaci CLI to fund your test addresses later.","enable-ogmios-and-kupo-support-optional#Enable Ogmios and Kupo Support (Optional)":"Yaci DevKit bundles both Ogmios and Kupo. However, Kupo is not enabled by default. To activate both Ogmios and Kupo support,\nset ogmios_enabled & kupo_enabled flag in env file to true. Alternatively, you can enable both Ogmios & Kupo support using enable-kupomios command in Yaci CLI.","to-stop-devkit#To stop DevKit":"Use devkit.sh script to stop the DevKit containers.For, curl based installation, you can use the following command.\ndevkit stop\nFor, zip based installation, you can use the following command.\n./devkit.sh stop","yaci-cli---few-key-commands#Yaci CLI - Few Key Commands":"This section explains a few key commands specific to Yaci CLI.","create-a-default-devnet#Create a default devnet":"yaci-cli:>create-node\nTo overwrite data or reset the existing default devnet, use the \"-o\" flag.\nUse --start flag to start the devnet after creation.\nyaci-cli:>create-node -o\nor,\nyaci-cli:>create-node -o --start\nKnown Issue: Yaci DevKit uses a share folder to store the data on host machine. In some setup, this causes issue due to permission.\nIf you face similar issue and not able to start the devnet, you can remove volumes section from docker-compose.yml file and restart the docker compose.\nIt should work fine and create the devnet data in the docker container itself. Please check this issue for more details.","create-a-default-devnet-node-with-conway-era#Create a default devnet node with Conway Era":"By default, Yaci DevKit creates a devnet with Babbage era. If you want to create a devnet with Conway era, use the following command.\nyaci-cli:>create-node -o --era conway","create-a-devnet-with-custom-slots-per-epoch#Create a devnet with custom slots per epoch":"To create devnet with a custom slots per epoch (By default 500 slots/epoch)For example: Create and start a devnet with 30 slots per epoch\nyaci-cli> create-node -o -e 30 --start\nNow, you should be in the \"devnet\" context. To start the devnet, use the \"start\" command.\ndevnet:default>start\nNote Now, with Yaci Viewer, you can conveniently check the devnet's data right from the browser. Simply open the following URL\nin your browser to access the Yaci Viewer.http://localhost:5173","to-reset-clusters-data#To reset cluster's data":"If your devnet gets stuck or you simply want to reset the data and restart with the same configuration, simply use the command \"reset\".\nIt will restore your devnet to its initial state, allowing you to continue your development seamlessly.\ndevnet:default>reset","to-stop#To stop":"devnet:default>stop","to-fund-a-new-address#To fund a new address":"Easily fund your test account with ADA using the \"topup\" command.\ndevnet:default> topup <address> <ada value>","to-check-utxos-at-an-address#To check utxos at an address":"devnet:default> utxos <address>","to-check-devnet-and-url-info#To check devnet and url info":"devnet:default> info","default-pool-id#Default Pool Id":"If you are testing pool delegation and reward withdrawal transaction in your application, you can use the following pool id\nwhich is already registered in the devnet.","query-devnets-cardano-node-using-cardano-cli#Query Devnet's Cardano Node using cardano-cli":"DevKit script has a wrapper script to query the Cardano node running in the devnet. You can use this script to query the Cardano node like\nyou usually do with cardano-cli command line tool. You don't need to install cardano-cli in your local machine or use protocol magic number in the command.For example:To query protocol parameters, you can use cli option with devkit script.\n./devkit.sh cli query protocol-parameters"}},"/":{"title":"Introduction","data":{"":"The Yaci DevKit offers a customizable Cardano devnet that quickly launches and resets via the Yaci CLI, enabling faster\niterations for developers. It features Yaci Store, a lightweight indexer using H2, and Yaci Viewer, a browser-based interface\nfor viewing transactions. It supports flexible configurations, integrates with Ogmios and Kupo, and is compatible\nwith Blockfrost API endpoints, all easily deployable with Docker Compose for efficient setup.","distribution-types#Distribution Types":"Yaci DevKit: A Docker Compose-based distribution that includes all required components. This is the recommended\ndistribution for most users. Follow the installation instructions in the next section to install Yaci DevKit.\nYaci CLI (Non-Docker): A ZIP distribution that includes only Yaci CLI. This distribution is useful for users who\nprefer to use Yaci CLI without Docker. With this distribution, you can download and manage required components like Cardano Node,\nOgmios, Kupo, and Yaci Store using Yaci CLI. For installation instructions, refer to the Yaci CLI Installation section.\nThis version improves readability and consistency in terminology.","yaci-devkit-installation#Yaci DevKit Installation":"","pre-requisites#Pre-requisites:":"Docker","installation#Installation":"To install latest stable version of Yaci DevKit, run:\ncurl --proto '=https' --tlsv1.2 -LsSf https://devkit.yaci.xyz/install.sh | bash\nTo install a specific version of Yaci DevKit, run:\ncurl --proto '=https' --tlsv1.2 -LsSf https://devkit.yaci.xyz/install.sh | bash -s -- <version>\nNote: Replace <version> with the desired version number without the v prefix.","zip-installation#Zip Installation":"Download the latest zip from release section and unzip it.\nImportant:In Yaci DevKit v0.9.1-beta and later, the Yaci CLI's native executable is the default. If you encounter issues starting DevKit,\nyou can switch back to the Java version by setting the yaci_cli_mode environment variable to java in the config/env file within\nthe Yaci DevKit installation directory.\""}},"/multi-node-setup":{"title":"Multi Node Setup","data":{"multi-node-setup-experimental#Multi Node Setup (Experimental)":"While the primary purpose of DevKit is to provide a simple way to get started with a single devnet node, it is possible to use\nDevKit to create a multi-node setup. The additional nodes can be mix of block producing nodes and relay nodes.A multi-node setup can be useful for various testing scenarios.The additional nodes can be on the same machine or on different machines. There are separate commands to start a block producing node or a relay node.\nFor non-development multi-node setups, it is recommended to set shiftStartTimeBehind=false in the config/node.properties file\nand configure conwayHardForkAtEpoch=1. This way, the network will start in the Babbage era and transition to the Conway era at epoch 1.\nThis approach helps avoid a V2 cost model issue that occurs if the network starts in the Conway era at epoch 0.For more details, check this issue: https://github.com/bloxbean/yaci-devkit/issues/65#issuecomment-2318155838.\"conwayHardForkAtEpoch=1 \nshiftStartTimeBehind=false\nYou need to following steps in order to setup a multi-node setup:","1-setup-additional-node-folders#1. Setup Additional Node folders":"","additional-nodes-on-the-same-machine#Additional nodes on the same machine":"In this case, you can copy the original devkit installation directory and rename it to devkit2 or node2 etc.Update the config/env file to use a different node name and ports for the additional node.\nnode=node2\n#######################################################\n# Ports\n#######################################################\nHOST_N2N_PORT=3002\nHOST_N2C_SOCAT_PORT=3334\nHOST_STORE_API_PORT=8081\nHOST_VIEWER_PORT=5174\nHOST_CLUSTER_API_PORT=10001\nHOST_SUBMIT_API_PORT=8091\nHOST_OGMIOS_PORT=1338\nHOST_KUPO_PORT=1443","additional-nodes-on-different-machines#Additional nodes on different machines":"Install DevKit on the additional machines using standard installation instructions.","2-start-the-main-devnet-node#2. Start the main devnet node":"Start the first devnet node using the start command with the standard steps. This will also act as our main bootstrap node or admin node.\ndevkit start\nyaci-cli> create-node -o --start\nNote: When we start a DevKit instance, it exposes a cluster API endpoint (default port 10000) which is used to get the genesis files and other configuration\ninformation while starting additional nodes.You can check available cluster apis here http://localhost:10000/swagger-ui/index.html","3-start-devkit-instance-for-the-additional-node#3. Start DevKit instance for the additional node":"Go to the additional node folder if it is on the same machine or login to additional machine.\nStart devkit in the additional node folder\ndevkit start\nor,\n./bin/devkit.sh start","4-join-to-the-main-node-to-download-the-genesis-files-and-create-the-node#4. Join to the main node to download the genesis files and create the node":"Join to create a block producing node\nyaci-cli:> join --admin-url http://<main_node_ip>:10000 --bp --overwrite --overwrite--pool-keys\n--admin-url is the cluster API endpoint of the main node. You can't use localhost here, you need to use the IP address of the main node.\n--bp is used to create a block producing node.\n--overwrite is used to overwrite the existing configuration files or node folder if it already exists.\n--overwrite-pool-keys is used to overwrite the pool keys with new keys. To use the previously generated pool keys, you can skip this flag.\nThis command will download the genesis files and other configuration files from the main node, create keys required\nfor the new block producing node and create the node folder.\nJoin to create a relay node\nTo create a relay node, just skip the --bp flag.\nyaci-cli:> join --admin-url http://<main_node_ip>:10000 --overwrite\n--admin-url is the cluster API endpoint of the main node. You can't use localhost here, you need to use the IP address of the main node.\nImportant: Don't use --name flag in join command. This option will be removed in future releases. Using this flag may cause issues in the current version.","5-start-the-additional-node#5. Start the additional node":"After the join command is successful, you should be already in bp or relay node context in Yaci CLI.\nNow, you can start the additional node using the start command.\ndevnet-peer/bp:default> start","6-register-the-pool-for-new-block-producing-node-only-for-bp-nodes#6. Register the pool for new block producing node (Only for BP nodes)":"If you have created a new block producing node, you need to register the pool for the new node, so that it can participate in the slot leader selection process.\ndevnet-peer/bp:default> register-pool\nThe above command will register the pool for the new block producing node with default options.During the registration process, you can also see pool's owner address. You can now topup the owner address with some funds\nto increase the stake amount of the pool. Topup enough ada, so that the new pool is eligible to create blocks.In the below example, we are topping up the owner address with 650,000 Ada.\ndevnet-peer/bp:default> topup  650000\nNote: You can also provide additional options while registering the pool. (Optional)\n       --ticker or -t String\n       Pool Ticker\n       [Optional, default = DEFAULT_POOL]\n       --metadata-hash or -m String\n       Metadata Hash\n       [Optional, default = ]\n       --pledge or -p BigInteger\n       Pledge. Default 10,000,000 lovelace\n       [Optional, default = 10000000]\n       --cpst or -c BigInteger\n       Cost in lovelace. Default 340 Ada\n       [Optional, default = 340000000]\n       --margin double\n       Relay Host. Default 0.02\n       [Optional, default = 0.02]\n       --relay-host or -r String\n       Relay Host\n       [Optional, default = 127.0.0.1]\n       --relay-port or -p int\n       Relay Port\n       [Optional, default = 0]\n       --help or -h\n       help for register-pool\n       [Optional]"}},"/node-configuration":{"title":"Node Configuration","data":{"node-configuration#Node Configuration":"Apart from a few options like block time, epoch length, and slot length which are provided through Yaci CLI,\nother devnet node-related configurations can be configured through the node.properties file. The configurations defined in the\nnode.properties file will be used during devnet node creation.For zip based installation, this file is located under installation directory config/node.properties.For curl based installation, this file is located under $HOME/.yaci-devkit/config/node.properties.Please refer to the config/node.properties file for all the node specific configurations.","example-of-few-key-configurations#Example of few key configurations:":"","securityparam#securityParam":"To set the security parameter for the node. Default value is 300. (300 blocks)To change the configuration, add to the node.properties file\nsecurityParam=<int value>\nNote: If you want to stop your node for some time and restart it later without a reset, allowing it to continue from where\nit left off and use existing data, you may want to set securityParam to a higher value.\nOtherwise, the node may get stuck and you need to reset the node.Let's say you want to stop your node and start the node again next day to continue from where it left off,\nthen you can set securityParam to a higher values like 86400 for 1 sec block time.\nCurrently, for Devnet work, the security parameter is set to a reasonable value to improve the developer experience.\nFor a real/multi-node network setup, please refer to this known issue/workaround: https://github.com/bloxbean/yaci-devkit/issues/65#issuecomment-2318155838","peersharing#peerSharing":"To enable or disable peer sharing. Default value is true.","slotsperkesperiod#slotsPerKESPeriod":"To set the number of slots per KES period. Default value is 129600.","maxkesevolutions#maxKESEvolutions":"To set the maximum KES evolutions. Default value is 60.Note: More configurations can be found in node.properties file."}},"/tutorials/ccl/overview":{"title":"Overview","data":{"":"https://cardano-client.dev///TODO"}},"/tutorials/lucid-evolution/overview":{"title":"Overview","data":{"":"https://github.com/Anastasia-Labs/lucid-evolution//TODO"}},"/tutorials/meshjs/overview":{"title":"Building transactions with Mesh SDK and submit to Yaci Devnet's Cardano Node","data":{"":"More documentation on the Mesh SDK's Yaci DevKit Integration can be found here.\nThis example demonstrates how to build a transaction with the Mesh SDK and submit it to the Yaci Devnet's Cardano Node. The Mesh SDK is a JavaScript library that provides a set of tools to interact with the Cardano blockchain.","yaci-provider-to-query-and-submit-with-yaci-instance#Yaci Provider to query and submit with Yaci instance":"Providers are services provided to help you interact with the blockchain. In this case, we are using the Yaci provider to interact with the Yaci instance. It is used to query and submit transactions to the Yaci instance.First, we import YaciProvider from @meshsdk/core [source]:\nimport { YaciProvider } from \"@meshsdk/core\";\nexport function getYaciProvider() {\n  return new YaciProvider(\"http://localhost:8080/api/v1\");\n}","a-wallet-for-signing-transactions#A wallet for signing transactions":"Next, a wallet is used to sign transactions. We import MeshWallet from @meshsdk/core and create a wallet with YaciProvider [source]:\nimport { MeshWallet } from \"@meshsdk/core\";\nimport { getYaciProvider } from \"./get-yaci-provider\";\nexport function getWalletForYaci() {\n  const blockchainProvider = getYaciProvider();\n  return new MeshWallet({\n    networkId: 0,\n    fetcher: blockchainProvider,\n    submitter: blockchainProvider,\n    key: {\n      type: \"mnemonic\",\n      words: [\n        \"your\",\n        \"mnemonic\",\n        ...\n        \"here\",\n      ],\n    },\n  });\n}","create-a-transaction-to-send-lovelace#Create a transaction to send lovelace":"Finally, we create a transaction to send lovelace to a recipient [source]:\nimport { Transaction, UTxO } from \"@meshsdk/core\";\nimport { getWalletForYaci } from \"./common/get-wallet-yaci\";\nimport { getYaciProvider } from \"./common/get-yaci-provider\";\nconst wallet = getWalletForYaci();\nconst recipient =\n  \"\";\nconst tx = new Transaction({ initiator: wallet }).sendLovelace(\n  recipient,\n  \"25000000\"\n);\nconst unsignedTx = await tx.build();\nconst signedTx = await wallet.signTx(unsignedTx);\nconst txHash = await wallet.submitTx(signedTx);\nconsole.log(\"txHash\", txHash);"}},"/yaci_cli_distribution":{"title":"Yaci CLI Distribution","data":{"introduction#Introduction":"For users who prefer not to use Docker, there's a ZIP distribution that contains only Yaci CLI. This allows you to download\nand manage necessary components like Cardano Node, Ogmios, Kupo, and Yaci Store directly through the command line.Please note that Yaci Viewer is not currently supported out-of-the-box in this distribution.","who-is-this-for#Who is this for?":"Developers and system administrators: Quickly set up a new custom node or multi-node networks\nUsers wanting more control: Easily manage compatible component versions and configurations","key-advantages-of-the-yaci-cli-distribution#Key advantages of the Yaci CLI distribution:":"Reduced Disk Space: Requires less disk space than the Docker image, containing only the Yaci CLI binary, configuration files, and any downloaded components.\nVersion Flexibility: Specify compatible versions of Cardano Node and other components directly in the download configuration file if the default versions don't meet your requirements.\nCustomizable Setup: Developers can selectively enable components like Yaci Store, Ogmios, and Kupo to achieve the same functionality as the Yaci DevKit Docker image.","supported-platforms#Supported Platforms":"Yaci CLI is currently supported on the following platforms:\nLinux x86: Tested on Ubuntu 20.04, Ubuntu 22.04\nMacOS 14 (Arm64) or later","installation#Installation":"Download the latest version of the Yaci CLI Zip file from the releases page.\nUnzip the downloaded file.\nYou will find the yaci-cli binary in the unzipped folder, and the configuration files in the config folder.","run-yaci-cli#Run Yaci CLI":"You can now run the yaci-cli binary. However, this distribution doesn't include any of the necessary components for creating a devnet.\nYou'll need to download these using Yaci CLI before proceeding.","download-components#Download Components":"The simplest way to download the necessary components is to use the download command. This will automatically download all\nthe required components for your specific platform, including Cardano Node, Ogmios, Kupo, Yaci Store, and JRE.\nyaci-cli:> download\nAll components will be downloaded to the $user_home/.yaci-cli folder by default.If you need to replace any existing components, simply use the --overwrite option.\nyaci-cli:> download --overwrite\nAlternatively, you can download the components individually using the download -c <component> command, replacing <component> with the specific component you want to download.\nyaci-cli:> download -c node\nyaci-cli:> download -c ogmios\nyaci-cli:> download -c kupo\nyaci-cli:> download -c yaci-store\nNote: You can change the default yaci-cli home folder by setting the yaci.cli.home property in the application.properties configuration file.","create-a-new-devnet#Create a new Devnet":"Once you have downloaded the required components, you're ready to create a new devnet. You can use the create-node command to do this.\nyaci-cli:> create-node -o --start\nThis command will create a new devnet with a single node and start it. By default, Yaci Store, Ogmios, and Kupo are disabled.\nYou can enable them by setting their respective enabled properties to true in the config/application.properties file.Alternatively, you can use the enable-kupomios, enable-yacistore, or enable-kupo commands before creating/starting the devnet.For more information on the available commands and their usage, refer to the Yaci CLI commands documentation here.","configuration#Configuration":"You'll find three configuration files within the config folder:","applicationproperties-#application.properties :":"This is the main configuration file to manage the functionality of Yaci CLI.","1-enabledisable-optional-components#1. Enable/Disable Optional Components":"By default, all optional components are disabled. To enable any of them, simply set their respective enabled property to true.\nogmios.enabled=true\nkupo.enabled=true\nyaci.store.enabled=true\nNote: If you want to use Yaci Store for transaction building, script cost evaluation, and transaction submission via a Blockfrost-compatible API layer,\nyou'll need to enable both Yaci Store and Ogmios.","2-update-ports#2. Update Ports":"You can update the default ports for the Ogmios, Kupo, and Yaci Store.\nogmios.port=1337\nkupo.port=1442\nyaci.store.port=8080","nodeproperties#node.properties":"This file contains the configuration for the Cardano Node. You can update the configuration as per your requirements to modify the node's genesis configuration.","downloadproperties#download.properties":"This file contains the default download versions for the various components. You can update these versions or even provide direct download URLs if needed.\nThis configuration helps you to download specific compatible versions of Cardano Node or other components, giving you greater control over your environment.","multi-node-network-setup#Multi Node Network Setup":"Since Yaci CLI is used in both Yaci DevKit and this distribution, the commands to create a multi-node network remain the same.\nYou can follow the instructions provided in the Additional Nodes on Different Machines section of the multi-node setup guide."}},"/services":{"title":"Services","data":{"services#Services":"Yaci DevKit has the following optional services. You may want to enable or disable them based on your application's requirements or the client library you are using.\nYaci Store : An indexer that provides Blockfrost-compatible API. It's useful if you're using a client library that relies on the Blockfrost API.\nOgmios : A lightweight bridge interface for cardano-node. It offers a WebSockets API that enables local clients to speak\nOuroboros' mini-protocols via JSON/RPC.\nKupo : Kupo is fast, lightweight and configurable chain-index for the Cardano blockchain.\nBy default, Yaci Store and Ogmios are enabled. While Yaci Store provides a Blockfrost-compatible API, it relies on Ogmios\nto support the transaction evaluation endpoint (/api/v1/utils/txs/evaluate). This is useful if you're using a client library\nthat performs online script cost estimation via Blockfrost's transaction evaluation endpoint.If you enable Kupo, a default wildcard \"catch all\" matching pattern is pre-configured.","configuration#Configuration":"Based on your requirements, you should enable or disable services in the env file to minimize the runtime memory footprint of DevKit.\nThough, you can also enable or disable services using specific commands in yaci-cli, but it's recommended to use the env file for a persistent configuration.","location-of-env-file#Location of env file":"For zip based installation, the env file is located under installation directory config/env.For curl based installation, the env file is located under $HOME/.yaci-devkit/config/env.","configuration-options#Configuration options":"yaci_store_enabled : Enable or disable Yaci Store service. Default is true.\nogmios_enabled : Enable or disable Ogmios service. Default is true.\nkupo_enabled : Enable or disable Kupo service. Default is false."}}}